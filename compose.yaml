version: '3.8'

services:
  # Frontend - Next.js application
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      # URL to the backend API - uses host.docker.internal for standalone mode compatibility
      NEXT_PUBLIC_API_URL: ${API_URL:-http://backend:3001}
    ports:
      - 3000:3000
    volumes:
      - ./front:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/.next
    # Can operate independently
    depends_on:
      - backend
    networks:
      - app-network
  
  # Backend API
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${DB_HOST:-db}:5432/${POSTGRES_DB:-labelapp}?schema=public
      PORT: 3001
    ports:
      - 3001:3001
    volumes:
      - ./back:/usr/src/app
      - /usr/src/app/node_modules
    # Can operate with external database
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
      - db-network
        
  # PostgreSQL database
  db:
    image: postgres:16
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-labelapp}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db-network

networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge

volumes:
  db-data:
    driver: local

